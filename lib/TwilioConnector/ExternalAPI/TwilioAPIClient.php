<?php

namespace Inbenta\TwilioConnector\ExternalAPI;

use Twilio\Rest\Client;
use Inbenta\TwilioConnector\ExternalDigester\TwilioDigester;


class TwilioAPIClient
{
    public $client;

    public $from;
    public $to;
    public $isWhatsapp;

    public $email;
    public $fullName;
    public $extraInfo;


    /**
     * Twilio SDK constructor
     *
     * @param string $auth
     * @param array $request
     */
    public function __construct($credentials, $request = null)
    {
        $this->client = new Client($credentials['sid'], $credentials['auth_token']);

        $this->isWhatsapp = isset($request['From']) ? strpos($request['From'], "whatsapp") !== false : false;

        $this->from = isset($request['To']) ? $request['To'] : null;    //To > From
        $this->to = isset($request['From']) ? $request['From'] : null; //From > To

        if($this->isWhatsapp){

          $fullName = 'whatsapp.' . str_replace('whatsapp:+', '', $this->to);

          $this->setFullName($fullName);
          $this->setEmail($fullName . '@continua.twilio.com');
          
        }

    }


    /**
     * Build an external session Id using the following pattern:
     *
     * @return String|null
     */
    public static function buildExternalIdFromRequest()
    {
        parse_str(file_get_contents('php://input'), $request);

        if (isset($request['AccountSid'])) {

            $from = isset($request['To']) ? $request['To'] : null; //To > From
            $to = isset($request['From']) ? $request['From'] : null; //From > To

            $response = str_replace(':+', '', 'twilio-' . $from . '-' . $to);
            $response = str_replace('+', '', $response); //Session don't accept ":" or "+"

            return $response;
        }
        return null;
    }


    /**
     * Establishes the Twilio sender (user) directly with the provided phone numbers
     * @param String $companyPhoneNumber
     * @param String $userPhoneNumber
     * @return void
     */
    public function setSenderFromId($companyPhoneNumber, $userPhoneNumber)
    {
        $this->from = '+' . $companyPhoneNumber;
        $this->to = '+' . $userPhoneNumber;
        $this->isWhatsapp = strpos($userPhoneNumber, "whatsapp") !== false;
        if ($this->isWhatsapp) {
            $this->from = str_replace('+whatsapp', 'whatsapp:+', $this->from);
            $this->to = str_replace('+whatsapp', 'whatsapp:+', $this->to);
        }
    }

    /**
     *   Generates the external id used by HyperChat to identify one user as external.
     *   This external id will be used by HyperChat adapter to instance this client class from the external id
     *   @return String external Id
     */
    public function getExternalId()
    {
        $response = str_replace(':+', '', 'twilio-' . $this->from . '-' . $this->to);
        $response = str_replace('+', '', $response);
        return $response;
    }

    /**
     *  Retrieves the Account SID from the external ID generated by the getExternalId method
     *  @param String $externalId
     *  @return String|null user phone number or null
     */
    public static function getUserNumberFromExternalId($externalId)
    {
        $externalIdExploded = explode('-', $externalId);
        if (array_shift($externalIdExploded) == 'twilio') {
            return $externalIdExploded[1];
        }
        return null;
    }

    /**
     *  Retrieves the company phone number from the external ID generated by the getExternalId method
     *  @param String $externalId
     *  @return String|null Company phone number or null
     */
    public static function getCompanyNumberFromExternalId($externalId)
    {
        $externalIdExploded = explode('-', $externalId);
        if (array_shift($externalIdExploded) == 'twilio') {
            return $externalIdExploded[0];
        }
        return null;
    }

    /**
     * Send an outgoing message.
     *
     * @param array $message
     * @return \Psr\Http\Message\ResponseInterface
     */
    private function send($message, $extra = [])
    {
        $destinationInfo = [
            "from" => $this->from,
            "body" => $message
        ];
        if (count($extra) > 0) {
            foreach ($extra as $key => $element) {
                $destinationInfo[$key] = $element;
            }
        }
        $response = $this->client->messages->create(
            $this->to,
            $destinationInfo
        );
        usleep(400000); //Make a pause before the next message, sleeps 400 miliseconds
        return $response;
    }

    /**
     * Sends a message to Twilio. Needs a message formatted with the Twilio notation
     *
     * @param  Array $message
     * @return Psr\Http\Message\ResponseInterface $messageSend
     */
    public function sendMessage($message)
    {
        $messageSend = false;
        if (isset($message['body'])) {
            $text = trim($message["body"]);
            if ($text != "") {
                $messageSend = $this->send(trim($text), []);
            }

            $extra = isset($message["extra"]) ? $message["extra"] : [];
            if (count($extra) > 0) {
                $messageSend = $this->send("", $extra);
            }
        }
        return $messageSend;
    }


    /**
     *   Method needed
     */
    public function showBotTyping($show = true)
    {
        return true;
    }


    /**
     * Get the fullname attribute
     * @return string
     */
    public function getFullName()
    {
        return trim($this->fullName);
    }

    /**
     *   Returns the user email or a default email made with the external ID
     *   @return string
     */
    public function getEmail()
    {
        return trim($this->email);
    }

    /**
     *   Returns the extra info data
     *   @return Array
     */
    public function getExtraInfo()
    {
        return $this->extraInfo;
    }


    /**
     * Get the phone number of the user
     */
    public function getUserPhone()
    {
        return $this->to;
    }


    /**
     * Set full name attribute
     *
     * @param String $fullName
     * @return void
     */
    public function setFullName($fullName)
    {
        $this->fullName = $fullName;
    }

    /**
     * Set extra info attributes
     *
     * @param Array $extraInfo
     * @return void
     */
    public function setExtraInfo($extraInfo)
    {
        $this->extraInfo = $extraInfo;
    }

    /**
     * Set email attribute
     *
     * @param String $email
     * @return void
     */
    public function setEmail($email)
    {
        $this->email = $email;
    }


    /**
     * Sends a message to Twilio. Needs a message formatted with the Twilio notation
     */
    public function sendTextMessage($text)
    {
        $data = [
            'body' => $text
        ];
        if (strpos($text, "<") !== false) { //If text has a type of html tags
            $digester = new TwilioDigester('', '', '');
            $data = $digester->handleMessageWithImgOrIframe($text);
            $digester->handleMessageWithLinks($text);
            $digester->handleMessageWithTextFormat($text, $this->isWhatsapp);
            $data["body"] = $digester->formatFinalMessage($text);
        }
        $this->sendMessage($data);
    }

    /**
     * Generates a Twilio attachment message from HyperChat message
     *
     * @param array $message
     * @return void
     */
    public function sendAttachmentMessageFromHyperChat($message)
    {
        $this->sendMessage(
            [
                'body' => "",
                'extra' => [
                    'mediaUrl' => [$message['fullUrl']]
                ]
            ]
        );
    }
}
